package com.tea.designview

import android.os.Bundle
import com.tea.paintmodule.ui.PaintActivity
import com.teaphy.arc.adapter.AdapterSingleText
import com.teaphy.arc.base.BaseRecyclerViewActivity
import com.teaphy.arc.callback.OnItemClickCallback
import org.jetbrains.anko.startActivity
import org.jetbrains.anko.toast
import android.graphics.BitmapFactory
import android.graphics.Bitmap
import android.util.Base64
import com.google.gson.Gson
import kotlinx.android.synthetic.main.activity_main.*


class MainActivity : BaseRecyclerViewActivity<AdapterSingleText.MyHolder, AdapterSingleText>() {

    val baseImg = "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"
    val json = "{\n" +
            "\t\"data\": \"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\",\n" +
            "\t\"success\": true\n" +
            "}"

    override fun getLayoutId(): Int {
        return R.layout.activity_main
    }

    override fun initData() {
    }

    override fun initTitle(): String {
        return getString(R.string.app_name)
    }

    override fun initView() {
        val testImg: TestImg = Gson().fromJson(json, TestImg::class.java)
        ivTest.setImageBitmap(stringtoBitmap(testImg.data))
    }

    override fun initAdapter() {
        mList.addAll(resources.getStringArray(R.array.arrayDesignColumn))
        mAdapter = AdapterSingleText(mList, object : OnItemClickCallback{
            override fun onClick(position: Int) {
                selectDesignModule(position)
            }

        })
    }

    private fun selectDesignModule(position: Int) {
        when (position) {
            0 -> startActivity<PaintActivity>()
            else -> toast("This is a invalid operation")
        }
    }

    fun stringtoBitmap(string: String): Bitmap? {
        //将字符串转换成Bitmap类型
        var bitmap: Bitmap? = null
        try {
            val bitmapArray: ByteArray
            bitmapArray = Base64.decode(string, Base64.DEFAULT)
            bitmap = BitmapFactory.decodeByteArray(bitmapArray, 0, bitmapArray.size)
        } catch (e: Exception) {
            e.printStackTrace()
        }

        return bitmap
    }
}
